import { writeFile, unlink, mkdir } from "fs/promises"
import { existsSync } from "fs"
import path from "path"
import { v4 as uuidv4 } from "uuid"

const UPLOAD_DIR = "/tmp/beatify-uploads"
const OUTPUT_DIR = "/tmp/beatify-outputs"

// Ensure directories exist
async function ensureDirectories() {
  if (!existsSync(UPLOAD_DIR)) {
    await mkdir(UPLOAD_DIR, { recursive: true })
  }
  if (!existsSync(OUTPUT_DIR)) {
    await mkdir(OUTPUT_DIR, { recursive: true })
  }
}

export async function saveUploadedFile(file: File): Promise<{ filePath: string; trackId: string }> {
  await ensureDirectories()

  const trackId = uuidv4()
  const extension = path.extname(file.name) || ".wav"
  const filename = `${trackId}${extension}`
  const filePath = path.join(UPLOAD_DIR, filename)

  const buffer = Buffer.from(await file.arrayBuffer())
  await writeFile(filePath, buffer)

  return { filePath, trackId }
}

export async function createMockOutputFiles(jobId: string): Promise<{ mixPath: string; stemPaths: string[] }> {
  await ensureDirectories()

  // Create mock output files (in production, these would be generated by AI service)
  const mixPath = path.join(OUTPUT_DIR, `${jobId}-mix.wav`)
  const stemPaths = [
    path.join(OUTPUT_DIR, `${jobId}-vocals.wav`),
    path.join(OUTPUT_DIR, `${jobId}-drums.wav`),
    path.join(OUTPUT_DIR, `${jobId}-bass.wav`),
    path.join(OUTPUT_DIR, `${jobId}-piano.wav`),
  ]

  // Write mock audio data (empty files for now)
  const mockAudioData = Buffer.alloc(1024, 0)

  await writeFile(mixPath, mockAudioData)
  for (const stemPath of stemPaths) {
    await writeFile(stemPath, mockAudioData)
  }

  return { mixPath, stemPaths }
}

export async function deleteTrackFiles(filePath: string, jobIds: string[]): Promise<void> {
  try {
    // Delete original file
    if (existsSync(filePath)) {
      await unlink(filePath)
    }

    // Delete job output files
    for (const jobId of jobIds) {
      const mixPath = path.join(OUTPUT_DIR, `${jobId}-mix.wav`)
      const stemPaths = [
        path.join(OUTPUT_DIR, `${jobId}-vocals.wav`),
        path.join(OUTPUT_DIR, `${jobId}-drums.wav`),
        path.join(OUTPUT_DIR, `${jobId}-bass.wav`),
        path.join(OUTPUT_DIR, `${jobId}-piano.wav`),
      ]

      if (existsSync(mixPath)) await unlink(mixPath)
      for (const stemPath of stemPaths) {
        if (existsSync(stemPath)) await unlink(stemPath)
      }
    }
  } catch (error) {
    console.error("Error deleting files:", error)
  }
}

export function getFileUrl(filePath: string): string {
  // In production, this would return S3 URLs or CDN URLs
  // For now, return a placeholder URL
  const filename = path.basename(filePath)
  return `/api/files/${filename}`
}
